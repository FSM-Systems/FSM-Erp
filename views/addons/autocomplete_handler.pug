// - This script creates dynamically an autocomplete on any element that has a class=autocomplete set
// - In order to function the element has to contain an attribute ac-source=<express route that returns JSON data>
// - and an extra <input type=hidden> element created in the form. The name of the hidden input has to be the same
// - as the field in the database that has to be updated. The autcomplete input has to be named as the field with _txt added
// - example: <field_name>_txt

// - This will make the frmnewitem insert function work properly.

// - Example

// - autocomplete element -> txtmsg_txt
// - hidden input element -> txtmsg
// - It will set the text in the input box and the database id of the selected item in the <element> hidden input
// - This can be used to update/insert into the database
// - Remember to always use uniwue identifiers based on id when using this functon in table, for example if the filed is username
// - the create one field with id="username_" + <id serial> + "_txt"  and the hidden field as id="username_" + <id serial>
// - the ac-source is the cource of the dropdown. Comes from one of the routes in /autocompletes

script.
	// Highlight the searched text in the autocomplete list
	/*$.ui.autocomplete.prototype._renderItem = function (ul, item) {
		item.label = item.label.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + $.ui.autocomplete.escapeRegex(this.term) + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
		return $("<li></li>")
		.data("item.autocomplete", item)
		.append("<a>" + item.label + "</a>")
		.appendTo(ul);
	};*/
	
	$(document).on("focus", ".autocomplete", function () {
		// Get the datasource from the element attributs
		var datasource = $(this).attr("ac-source");
		// Create the autocomplete opetions 
		var autocomplete_options = {
			appendTo: ".container", // append to container as default append to body doesn't work with boostrap
			dataType: "json",
			source: function( request, response ) {
				$.ajax({
					url: "/autocompletes/" + datasource, // get the source route that returns JSON from the attribute ac-source of the element 
					data: {
						term: request.term,
					},
					success: function(data) {
						//console.log(data)
						var transformed  = $.map(data, function (item) { // we have to pass the data as object otherwise autocomplete will not work
							return {
								label: item.label,
								value: item.value,		
								unit: item.unit,								
							}
						})
						response(transformed)												
					}
				});
			},
			minLength: 0,
			select: function( event, ui ) {
				event.preventDefault()
				// Put text in input element and is in hidden element
				$(this).val(ui.item.label);
				// If the element has a showunitsclass then the units for the selected element will be added after the input box
				if ($(this).hasClass("showunits")) {
					$(this).val(ui.item.label + ' ** ( ' + ui.item.unit + ' )');
				}
				$("#" + $(this).attr("id").replace("_txt","")).val(ui.item.value).trigger("change") // Id value that will be sent to DB for update
			},
			change: function (event, ui) {
				if (!ui.item) {
					$(this).val(""); // Force user to select item
				}	
			}
		}
		
		$(this).autocomplete(autocomplete_options).bind("dblclick",function () {
			$(this).autocomplete("search", "");
		})
	})